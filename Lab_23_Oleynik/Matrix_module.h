#ifndef MATRIX_MODULE_H_INCLUDED
#define MATRIX_MODULE_H_INCLUDED

/* Структура данных "матрица".
 * Данные записываются в вещественный массив matrix_array.
 * height - количество строк.
 * width - количество столбцов.
 */
struct matrix
{
    size_t height, width;
    double *matrix_array;
};

/* Псевдоним структуры "матрица".
 */
typedef struct matrix matrix;

/* Функция создаёт матрицу с количеством строк height и количеством столбцов width.
 * Функция возвращает NULL, если не была выделена память под указатель на матрицу или под массив данных.
 * Функция возвращает указатель matrix_a на созданную матрицу в остальных случаях.
 */
matrix * matrix_alloc (size_t height, size_t width);

/* Функция особождает память, выделенную под указатель на матрицу matrix_a или под массив данных.
 */
void matrix_free (matrix *matrix_a);

/* Функция вводит данные в массив матрицы matrix_a через консоль ввода.
 * Функция возвращает 1, если матрица не была передана.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_scan (matrix *matrix_a);

/* Функция выводит данные массива матрицы matrix_a через консоль вывода.
 * Функция возвращает 1, если матрица не была передана.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_print (const matrix *matrix_a);

/* Функция вводит данные в массив матрицы matrix_a через файл с названием, переданным в строке file.
 * Функция возвращает 1, если матрица или строка не были передана или файл не был открыт.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_fscan (const char * file, matrix *matrix_a);

/* Функция вводит данные в массив матрицы matrix_a через файл с названием, переданным в строке file.
 * Функция возвращает 1, если матрица или строка не были передана или файл не был открыт.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_fprint (const char * file, const matrix *matrix_a);

/* Функция получает указатель на элемент матрицы matrix_a с индексами i и j.
 * Функция возвращает NULL, если матрица не была передана, индекс i был больше или равен
 * количества строк матрицы или индекс j - количества столбцов.
 * Функция возвращает указатель на найденный элемент в остальных случаях.
 */
double * matrix_get (matrix *matrix_a, size_t i, size_t j);

/* Функция получает константный указатель на элемент матрицы matrix_a с индексами i и j.
 * Функция возвращает NULL, если матрица не была передана, индекс i был больше  или равен
 * количества строк матрицы или индекс j - количества столбцов.
 * Функция возвращает константный указатель на найденный элемент в остальных случаях.
 */
const double * matrix_get_const (const matrix *matrix_a, size_t i, size_t j);

/* Функция создаёт матрицу, копируя в неё данные матрицы matrix_a.
 * Функция возвращает NULL, если матрица matrix_a не была предана или новая матрица не была создана.
 * Функция возвращает указатель на новую матрицу в остальных случаях.
 */
matrix * matrix_copy (const matrix *matrix_a);

/* Функция создаёт единичную матрицу размера size_matrix.
 * Функция возвращает NULL, если матрица не была создана.
 * Функция возвращает указатель matrix_a на созданную матрицу в остальных случаях.
 */
matrix * matrix_alloc_id (size_t size_matrix);

/* Функция создаёт нулевую матрицу с количеством строк height и количеством столбцов width.
 * Функция возвращает NULL, если матрица не была создана.
 * Функция возвращает указатель matrix_a на созданную матрицу в остальных случаях.
 */
matrix * matrix_alloc_zero (size_t height, size_t width);

/* Функция копирует значения матрицы matrix_src в матрицу matrix_dst.
 * Функция возвращает 1, если матрицы не были переданы или количество строк или столбцов у матриц не совпадает.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_assign (matrix *matrix_dst, const matrix *matrix_src);

/* Функция складывает матрицы matrix_a1 и matrix_a2, записывая результат в матрицу matrix_a1.
 * Функция возвращает 1, если матрицы не были переданы или количество строк или столбцов у матриц не совпадает.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_sum (matrix *matrix_a1, const matrix *matrix_a2);

/* Функция складывает матрицы matrix_a1 и matrix_a2, записывая результат в матрицу matrix_a.
 * Функция возвращает 1, если матрицы не были переданы или количество строк или столбцов у матриц не совпадает.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_sum_three (const matrix *matrix_a1, const matrix *matrix_a2, matrix *matrix_a);

/* Функция создаёт матрицу matrix_b и складывает матрицы matrix_a1 и matrix_a2, записывая результат в матрицу matrix_b.
 * Функция возвращает NULL, если матрицы matrix_a1 или matrix_a2 не были переданы, матрица matrix_b не создана
 * или количество строк или столбцов у матриц не совпадает.
 * Функция возвращает указатель на матрицу matrix_b в остальных случаях.
 */
matrix * matrix_alloc_sum (const matrix *matrix_a1, const matrix *matrix_a2);

/* Функция вычетает матрицу matrix_a2 из матрицы matrix_a2, записывая результат в матрицу matrix_a1.
 * Функция возвращает 1, если матрицы не были переданы или количество строк или столбцов у матриц не совпадает.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_subtract (matrix *matrix_a1, const matrix *matrix_a2);

/* Функция вычетает матрицу matrix_a2 из матрицы matrix_a2, записывая результат в матрицу matrix_a.
 * Функция возвращает 1, если матрицы не были переданы или количество строк или столбцов у матриц не совпадает.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_subtract_three (const matrix *matrix_a1, const matrix *matrix_a2, matrix *matrix_a);

/* Функция создаёт матрицу matrix_b и вычетает матрицу matrix_a2 из матрицы matrix_a2, записывая результат в матрицу matrix_b.
 * Функция возвращает NULL, если матрицы matrix_a1 или matrix_a2 не были переданы, матрица matrix_b не создана
 * или количество строк или столбцов у матриц не совпадает.
 * Функция возвращает указатель на матрицу matrix_b в остальных случаях.
 */
matrix * matrix_alloc_subtract (const matrix *matrix_a1, const matrix *matrix_a2);

/* Функция умножает матрицу matrix_a на скаляр scalar, записывая результат в матрицу matrix_a1.
 * Функция возвращает 1, если матрица не была передана.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_multi_scalar (matrix *matrix_a, double scalar);

/* Функция умножает матрицу matrix_a1 на скаляр scalar, записывая результат в матрицу matrix_a.
 * Функция возвращает 1, если матрицы не были переданы или количество строк или столбцов у матриц не совпадает.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_multi_three_scalar (const matrix *matrix_a1, double scalar, matrix *matrix_a);

/* Функция создаёт матрицу matrix_b и умножает матрицу matrix_a на скаляр scalar, записывая результат в матрицу matrix_b.
 * Функция возвращает NULL, если матрица matrix_a не была передана или матрица matrix_b не создана.
 * Функция возвращает указатель на матрицу matrix_b в остальных случаях.
 */
matrix * matrix_alloc_multi_scalar (const matrix *matrix_a, double scalar);

/* Функция перемножает матрицы matrix_a1 и matrix_a2, записывая результат в матрицу matrix_a.
 * Функция возвращает 1, если матрицы не были переданы или количество столбцов матрицы matrix_a1
 * и строк матрицы matrix_a2, количество строк матриц matrix_a1 и matrix_a или количество столбцов
 * матриц matrix_a1 и matrix_a не совпадает.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_multi_three (const matrix *matrix_a1, const matrix *matrix_a2, matrix *matrix_a);

/* Функция создаёт матрицу matrix_b и перемножает матрицы matrix_a1 и matrix_a2, записывая результат в матрицу matrix_b.
 * Функция возвращает NULL, если матрицы не были переданы, матрица matrix_b не создана или количество столбцов матрицы matrix_a1
 * и строк матрицы matrix_a2, количество строк матриц matrix_a1 и matrix_a или количество столбцов
 * матриц matrix_a1 и matrix_a не совпадает.
 * Функция возвращает указатель на матрицу matrix_b в остальных случаях.
 */
matrix * matrix_alloc_multi (const matrix *matrix_a1, const matrix *matrix_a2);

/* Функция вычисляет норму матрицы matrix_a как максимум сумм модулей элементов строк.
 * Функция возвращает -1, если матрица не была передана.
 * Функция возвращает неотрицательное число max_string в остальных случаях.
 */
double matrix_norm (const matrix *matrix_a);

/* Функция производит транспозицию матрицы matrix_a, изменяя её.
 * Функция возвращает 1, если матрица не была передана или матрица не является квадратной.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_transpose (matrix *matrix_a);

/* Функция меняет местами строки i и j в матрице matrix_a.
 * Функция возвращает 1, если матрица не была передана или индексы i или j были больше количества строк матрицы.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_rearranging_strings (matrix *matrix_a, size_t i, size_t j);

/* Функция умножает i-ую строку в матрице matrix_a на скаляр scalar.
 * Функция возвращает 1, если матрица не была передана или индекс i был больше количества строк матрицы.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_multi_string_number (matrix *matrix_a, size_t i, double scalar);

/* Функция прибавляет к строке i строку j, домноженную на скаляр scalar, в матрице matrix_a.
 * Функция возвращает 1, если матрица не была передана или индексы i или j были больше количества строк матрицы.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_sum_string_multi_number (matrix *matrix_a, size_t i, size_t j, double scalar);

/* Функция меняет местами столбцы i и j в матрице matrix_a.
 * Функция возвращает 1, если матрица не была передана или индексы i или j были больше количества столбцов матрицы.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_rearranging_columns (matrix *matrix_a, size_t i, size_t j);

/* Функция умножает i-ый столбец в матрице matrix_a на скаляр scalar.
 * Функция возвращает 1, если матрица не была передана или индекс i был больше количества столбцов матрицы.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_multi_column_number (matrix *matrix_a, size_t i, double scalar);

/* Функция прибавляет к столбцу i столбец j, домноженный на скаляр scalar, в матрице matrix_a.
 * Функция возвращает 1, если матрица не была передана или индексы i или j были больше количества столбцов матрицы.
 * Функция возвращает 0 в остальных случаях.
 */
int matrix_sum_column_multi_number (matrix *matrix_a, size_t i, size_t j, double scalar);

/* Функция вычисляет определитель квадратной матрицы matrix_a.
 * Функция возвращает NaN, если матрица matrix_a не была передана, промежуточная
 * матрица matrix_b не создана или матрица matrix_a на является квадратной.
 * Функция возвращает неотрицательное вещественное число в остальных случаях.
 */
double matrix_determinant (matrix *matrix_a);

#endif // MATRIX_MODULE_H_INCLUDED
